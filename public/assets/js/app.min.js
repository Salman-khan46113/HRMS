
$(function () {
  // Admin Panel settings

  //****************************
  /* This is for the mini-sidebar if width is less then 1170*/
  //****************************
  var setsidebartype = function () {
    var width =
      window.innerWidth > 0 ? window.innerWidth : this.screen.width;
    if (width < 1199) {
      $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
      $("#main-wrapper").addClass("mini-sidebar");
    } else {
      $("#main-wrapper").attr("data-sidebartype", "full");
      $("#main-wrapper").removeClass("mini-sidebar");
    }
  };
  $(window).ready(setsidebartype);
  $(window).on("resize", setsidebartype);
  //****************************
  /* This is for sidebartoggler*/
  //****************************
  $(".sidebartoggler").on("click", function () {
    // $("#main-wrapper").toggleClass("mini-sidebar");
    // if ($("#main-wrapper").hasClass("mini-sidebar")) {
    //   $(".sidebartoggler").prop("checked", !0);
    //   $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
    // } else {
    //   $(".sidebartoggler").prop("checked", !1);
    //   $("#main-wrapper").attr("data-sidebartype", "full");
    // }
  });
  $(".sidebartoggler").on("click", function () {
    $("#main-wrapper").toggleClass("show-sidebar");
  });
  $(".filter-popup").on("click", function () {
    $("#main-wrapper").toggleClass("show-filterbar");
  });

  $(".filter-row .search-show-hide").on("click",function(){
     var element = $(this).parents(".filter-row");
     var cursor_element = $(this).find("i.ti-minus");
     if(cursor_element.length > 0){
      $(this).html("<i class='ti ti-plus'></i>")
     }else{
      $(this).html("<i class='ti ti-minus'></i>")
     }
     $(element).find(".sidebar-item").toggle()
  })
  // $(".left-sidebar .nav-small-cap").next().toggle();
  $(".left-sidebar .nav-small-cap").on("click",function(){
    $(this).next().toggle()
    $(this).toggleClass("open")
    console.log()
  })

  $(document).on("click",".date-picker-addon",function(){
    $(this).parents(".input-group").find(".hasDatepicker").datepicker("show");
  })
  $(document).on("click",".time-picker-addon",function(){
    $(this).parents(".input-group").find("input").trigger("click");
  })

  // remove validation message on select drpdown val
  $(document).on("change","select,.hasDatepicker",function(){
    var id = $(this).attr("id");
    var error_elemt= $("#"+id+"-error");
    if($(this).val() != ""){
       $(this).removeClass("error")
    }
    if($(this).val() != "" && error_elemt.length > 0){
        $("#"+id+"-error").remove()

    }
  })

  $("#downloadPDFBtn").on("click",function(){
          $(".buttons-pdf").trigger("click");
  })
  $("#downloadCSVBtn").on("click",function(){
      $(".buttons-csv").trigger("click");
  })
  var number_formatclasses = [".number-formatter"];
  GetKeyUp(number_formatclasses.toString());

})

function GetKeyUp(className) {

    $(document).on('focus click', 'input', function (e) {
        var val = $(this).val();
        if (val == 0.00) {
            $(this).val('');
        }
    });

    $(document).on('keyup', '' + className + '', function (e) {
        e.preventDefault();
        var val = $(this).val();
        var re = /^([0-9,]+[\.]?[0-9]?[0-9]?|[0-9]+)$/g;
        var re1 = /^([0-9,]+[\.]?[0-9]?[0-9]?|[0-9]+)/g;
        if (this.value.length == 0) {
            $(this).val('');
        }
        if (re.exec(val)) {
            var beforeval = format_number(val);
            $(this).val(beforeval);
        } else {
            val = re1.exec(val);
            if (val) {
                $(this).val(val[0]);
            } else {
                $(this).val('');
            }
        }
        return true;
    });
}
function format_number(number, prefix, thousand_separator, decimal_separator){
    
        number = number.toString();
        var thousand_separator = thousand_separator || ',',
                decimal_separator = decimal_separator || '.',
                regex = new RegExp('[^' + decimal_separator + '\\d]', 'g'),
                number_string = number.replace(regex, '').toString(),
                split = number_string.split(decimal_separator),
                rest = split[0].length % 3,
                result = split[0].substr(0, rest),
                thousands = split[0].substr(rest).match(/\d{3}/g);
        if (thousands) {
            separator = rest ? thousand_separator : '';
            result += separator + thousands.join(thousand_separator);
        }
        result = split[1] != undefined ? result + decimal_separator + split[1] : result;
    
        return prefix == undefined ? result : (result ? prefix + result : '');   
        
}
function removeFormatterNumber(number) {

    if (parseFloat(number) != 'NaN' && $.trim(number) != '') {
        number = number.toString();
        let removed_format_number =  number.replace(/,/g, '');
        if(removed_format_number > 900719925474099){
            return BigInt(removed_format_number);
        }else{
            return parseFloat(number.replace(/,/g, ''));   
        }
    } else {
        return 0;
    }
}